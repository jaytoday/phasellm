"""
Chain of Thought (CoT) analysis for a data set. Please see the README.md for more information.
"""

import os
from dotenv import load_dotenv

from phasellm.llms import OpenAIGPTWrapper, ChatBot

# Where we write the output of this analysis.
OUT_FILE = "output.md"

def save_output(output, header):
    """
    Appends model outputs to a markdown file. Includes a header ("# header") and then the output itself.
    """
    with open(OUT_FILE, 'a') as writer:
        writer.write(f"# {header}\n\n{output}\n\n")

# This prompt is basically a copy/paste of what is generated by ResearchLLM for the 'incomes.csv' data set via the generateOverview() function.
messages = [{"role":"system", "content": """You are a data science research assistant. We will ask you about a big data set and would like you to break down the analysis you suggest into specific tasks that we can then write code for."""},
{"role":"user", "content":"""I am researching the relationship between income and sociodemographic census info. I have imported Pandas as `pd`, Numpy as `np`, `scipy`, and `sklearn`, and have a dataframe called `df` loaded into Python. `df` contains the following variables and variable types:

Column Name: age
Column Type: int64

Column Name: workclass
Column Type: object
Sample Values: ['?' 'Federal-gov' 'Local-gov' 'Never-worked' 'Private' 'Self-emp-inc'
'Self-emp-not-inc' 'State-gov' 'Without-pay']

Column Name: fnlwgt
Column Type: int64

Column Name: education
Column Type: object
Sample Values: ['10th' '11th' '12th' '1st-4th' '5th-6th' '7th-8th' '9th' 'Assoc-acdm'
'Assoc-voc' 'Bachelors' 'Doctorate' 'HS-grad' 'Masters' 'Preschool'
'Prof-school' 'Some-college']

Column Name: education.num
Column Type: int64

Column Name: marital.status
Column Type: object
Sample Values: ['Divorced' 'Married-AF-spouse' 'Married-civ-spouse'
'Married-spouse-absent' 'Never-married' 'Separated' 'Widowed']

Column Name: occupation
Column Type: object
Sample Values: ['?' 'Adm-clerical' 'Armed-Forces' 'Craft-repair' 'Exec-managerial'
'Farming-fishing' 'Handlers-cleaners' 'Machine-op-inspct' 'Other-service'
'Priv-house-serv' 'Prof-specialty' 'Protective-serv' 'Sales'
'Tech-support' 'Transport-moving']

Column Name: relationship
Column Type: object
Sample Values: ['Husband' 'Not-in-family' 'Other-relative' 'Own-child' 'Unmarried' 'Wife']

Column Name: race
Column Type: object
Sample Values: ['Amer-Indian-Eskimo' 'Asian-Pac-Islander' 'Black' 'Other' 'White']

Column Name: sex
Column Type: object
Sample Values: ['Female' 'Male']

Column Name: capital.gain
Column Type: int64

Column Name: capital.loss
Column Type: int64

Column Name: hours.per.week
Column Type: int64

Column Name: native.country
Column Type: object
Sample Values: ['?' 'Cambodia' 'Canada' 'China' 'Columbia' 'Cuba' 'Dominican-Republic'
'Ecuador' 'El-Salvador' 'England' 'France' 'Germany' 'Greece' 'Guatemala'
'Haiti' 'Holand-Netherlands' 'Honduras' 'Hong' 'Hungary' 'India' 'Iran'
'Ireland' 'Italy' 'Jamaica' 'Japan' 'Laos' 'Mexico' 'Nicaragua'
'Outlying-US(Guam-USVI-etc)' 'Peru' 'Philippines' 'Poland' 'Portugal'
'Puerto-Rico' 'Scotland' 'South' 'Taiwan' 'Thailand' 'Trinadad&Tobago'
'United-States' 'Vietnam' 'Yugoslavia']

Column Name: income
Column Type: object
Sample Values: ['<=50K' '>50K']

````````

With all of the above in mind, could you please provide me with a set of analysis steps you would recommend I run on the data to better understand what drives income inequality? Please provide a numbered list where each number is a specific analytical step. For each step, include the hypothesis you would test, what variables you'd look at, and what you'd be hoping to find.

Do not worry about visualizing the data, as I'd like to ensure the outputs are all things that you are able to interpret afterwards. """}
]

def split_cot(cot):
    """
    Takes a numbered list generated by an LLM and splits it into an array.
    """
    lines = cot.split("\n")
    cot_steps = []

    step_text = ""
    for i in range(0, len(lines)):
        line = lines[i]
        if len(line.strip()) > 0:
            step_text += line + "\n"
        else:
            cot_steps.append(step_text.strip())
            step_text = ""

    return cot_steps

load_dotenv()

print("Setting up chat...")

openai_api_key = os.getenv("OPENAI_API_KEY")
o = OpenAIGPTWrapper(openai_api_key, 'gpt-4')
c = ChatBot(o, messages[0]['content'])

print("Getting CoT...")

# Step 1, let's get a chain of thought (COT) approach to understanding the data set.
response = c.chat(messages[1]['content'])
save_output(response, "Chain of Thought Plan for Data Analysis")
cot_steps = split_cot(response)

# Step 2, go through each COT step and ask GPT-4 to generate code.
step_num = 1
for step in cot_steps:

    print(f"Generating code for step {step_num}.")

    prompt = f"""You wrote the following instructions for a step:
{step}

Please write the Python code for the step above. Assume the following:
1. Start your response with ```python
2. End your response with ```
3. Do not add any text outside the code. For anything that requires comment, simply add Python comments.
4. Assume the data was imported into a dataframe called `df`
5. I have imported Pandas as `pd`, Numpy as `np`, `scipy`, and `sklearn`. You can use those libraries and no others.
"""

    response = c.chat(prompt)

    save_output(step + "\n\n" + response, f"Code for Step #{step_num}")

    step_num += 1

print("Done!")